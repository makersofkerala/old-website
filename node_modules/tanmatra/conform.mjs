import * as f from './fun.mjs';

const conformanceCheck = (check, shape, v) => {

    if(!f.isEmpty(v) && !check()) {

	throw Error(JSON.stringify(v) + " doesn't conform to " + JSON.stringify(shape));
	
    } else {

	return true;
    }
    
};

/* Doesn't catch inner elements */
/* I can perform recursive check on Array elements and map values */
const conform = (shape, v) => {

    if(shape === "any") return true;

    if(v != undefined) {

	if(f.isObj(shape)) {

	    return conformanceCheck(() => f.eq(new Set(Object.keys(shape).map(x => x.toLowerCase())), new Set(Object.keys(v).map(x => x.toLowerCase()))), shape, v);
	    
	} else if(shape instanceof Array) {
	    
	    return conformanceCheck(() => (v instanceof Array), shape, v);
	    
	} else return conformanceCheck(() => typeof v === shape, shape, v);

    } else return true;

};

export { conform };
