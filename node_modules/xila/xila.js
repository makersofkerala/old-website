const fs = require('fs'), createServer = require('http').createServer, parseUrl = require('url').parse, path = require('path'), match = require('./url-match').match;

async function generateResponse(req, handler) {

    let responseMap = handler;

    /* Apply if it's function. */
    if(typeof handler == "function") responseMap = handler(req);

    /* Resolve if it's a Promise */
    if(responseMap instanceof Promise) responseMap = await responseMap;

    if(!responseMap) return notFound;

    if(typeof responseMap == "string") return html(responseMap);

    /* TODO: Figure out when to return a JSON Response */
    if(typeof responseMap == "object") {

	let {code = 200, headers, response} = responseMap;

	return {code, headers, response};
	
    } else throw Error("Unknown response type to parse" + JSON.stringify(responseMap));
    
};

async function respond(req, resp, handler) {

    let responseObj = {};

    try {

	responseObj = await generateResponse(req, handler);

    } catch(e) {

	console.log("Caught: ", e);

	responseObj = internalError;

    }

    let {code, response, headers = {"Content-type": "text/html"}} = responseObj;

    resp.statusCode = code;

    Object.entries(headers).map(([k,v]) => resp.setHeader(k,v));

    resp.end(response);

};


const get = (route, resp) => ({route, methods: {get: resp}});

const post = (route, resp) => ({route, methods: {post: resp}});

const redirect = (url) => ({code: 302, response: "Page moved to " + url, headers: {Location: url, "Content-type": "text/html"}});

const notFound = ({code: 404, response: "Not Found", headers: {"Content-type": "text/html"}});

const internalError = ({code: 500, response: "Internal Error", headers: {"Content-type": "text/html"}});

const html = resource => ({code: 200, headers: {"Content-type": "text/html"}, response: resource});

const json = resource => ({code: 200, headers: {"Content-type": "application/json"}, response: JSON.stringify(resource)});

async function file(path) {
    
    try {
	
	let file = await readFile(path);

	return {code: 200, headers: getFileType(path), response: file};

    } catch (e) {
	
	if(e.code == 'ENOENT') return notFound;

	else return internalError;

    }

};

const readFile = (path) =>
      new Promise((resolve, reject) => {
	  fs.readFile(path, (err, data) => err ? reject(err) : resolve(data));});

const getFileType = (pathname) => {

    let ext = path.parse(pathname).ext.substring(1);

    let contentTypes = {"html": "text/html", "ico": "image/x-icon", "js": "text/javascript", "mjs": "text/javascript", "json": "application/json", "wav": "audio/wav", "mp3": "audio/mpeg", "svg": "image/svg+xml", "pdf": "application/pdf", "ttf": "aplication/font-sfnt", "css": "text/css", "png": "image/png", "jpg": "image/jpg", "svg": "image/svg+xml"}; 

    return {"Content-type": contentTypes[ext] || "text/plain"};

};

const staticAssets = (filePath) => async ({matchedRoute}) => {
    
    let fullPath = path.join(filePath, matchedRoute.string);

    if(fullPath.endsWith("/")) fullPath += "index.html";

    return file(fullPath);

};

const makeHandler = (resource) => {

    if(resource == null) return {};

    else if(typeof resource == "string") return get("/", html(resource));

    else if(typeof resource == "function" || resource instanceof Promise) {

	return get("/", resource);
	
    } else if(typeof resource == "object" && !Array.isArray(resource) && resource.methods) {

	return resource;

    } else throw Error("Unknown response type " + JSON.stringify(resource));

};

const findHandler = ({pathname, method: reqMethod}, handlers) => {
    
    for(let {route, methods} of handlers) {

	if(route) {
	    
	    let matchedUrl = match(route, pathname);

	    let matchedHandler = methods[reqMethod.toLowerCase()];

	    if(matchedUrl && matchedHandler) {

		return {handler: matchedHandler, matchedRoute: matchedUrl};

	    }

	}
    }

    return null;

};

const processBody = (req) => {

    return new Promise((resolve, reject) => {

	let body = '';

	req.on('data', (chunk) => { body += chunk; });

	req.on('end', () => {

	    if(req.headers["content-type"] == "application/json") {
		
		body = JSON.parse(body);

	    };

	    resolve(body || null);

	});

	req.on('error', reject);

    });

};

const processReq = async (req) => {

    let {pathname, query} = parseUrl(req.url, true);

    let body = await processBody(req);

    return {pathname, query, body, method: req.method, url: req.url};

};

const serve = (...resources) => {
    
    let handlers = resources.map(makeHandler);

    return createServer(async (req, resp) => {

	let processedReq = await processReq(req);

	let {handler, matchedRoute} = findHandler(processedReq, handlers) || {};

	processedReq = Object.assign(processedReq, {matchedRoute});

	respond(processedReq, resp, handler);

    });

};

const api = {serve, get, post, html, json, redirect, file, staticAssets, respond};

module.exports = api;
